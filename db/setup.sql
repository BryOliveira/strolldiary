-- SQL script to set up the database schema for Strolldiary
-- Table containing user information
CREATE TABLE users (
  user_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username VARCHAR(64) NOT NULL UNIQUE,
  email VARCHAR(128) NOT NULL UNIQUE,
  password_hash VARCHAR(128) NOT NULL,
  created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Table of trip details (title, description, owner)
CREATE TABLE itineraries (
  itin_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  owner_id INT NOT NULL REFERENCES users(user_id),
  title VARCHAR(128) NOT NULL,
  description TEXT,
  num_travelers INT NOT NULL,
  start_day DATE,
  end_day DATE,
  created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Table containing booking information (planes, hotels, trains, etc.)
CREATE TABLE bookings (
  booking_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  itin_id INT REFERENCES itineraries(itin_id) NOT NULL,
  booking_type VARCHAR(64) NOT NULL,
  provider VARCHAR(128),
  reference_code VARCHAR(128),
  start_time TIMESTAMPZ,
  end_time TIMESTAMPZ,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Table containing expense details for budgeting for each trip
CREATE TABLE expenses (
  expenses_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  itin_id INT NOT NULL REFERENCES itineraries(itin_id),
  budget DECIMAL(10, 2),
  current_spending DECIMAL(10, 2),
  current_spending_split DECIMAL (10, 2),
  created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Table containing collaborators for each trip
CREATE TABLE collaborators (
  user_id INT NOT NULL REFERENCES users(user_id),
  itin_id INT NOT NULL REFERENCES itineraries(itin_id),
  role VARCHAR(16), -- 'viewer', 'editor', 'admin'
  PRIMARY KEY(user_id, itin_id)
);

-- Table containing itinerary entries and details (activity, travel, booking, etc.)
CREATE TABLE itinerary_entries (
  entry_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  itin_id INT NOT NULL REFERENCES itineraries(itin_id),
  day_id INT NOT NULL REFERENCES itinerary_days(day_id),
  entry_type VARCHAR(32) NOT NULL, -- 'activity', 'travel', etc.
  entry_ref_id INT NULL,       -- references activity/travel/booking row id
  order_in_day INT NOT NULL UNIQUE,
  notes TEXT,
  created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Table containing the information for each of the itinerary items
CREATE TABLE itinerary_items (
  item_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  place_id INT REFERENCES itinerary_places(place_id),
  name VARCHAR(128) NOT NULL,
  description TEXT,
  created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Table of each day in the itinerary
CREATE TABLE itinerary_days (
  day_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  itin_id INT NOT NULL REFERENCES itineraries(itin_id),
  day DATE NOT NULL,
  notes TEXT
);

-- Table containing travel information for each itinerary entry (flights, walks, public transite, etc.)
CREATE TABLE itinerary_travels (
  travel_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  from_place_id INT REFERENCES itinerary_places(place_id),
  to_place_id INT REFERENCES itinerary_places(place_id),
  travel_mode VARCHAR(32) NOT NULL,
  departure_time TIMESTAMPTZ,
  arrival_time TIMESTAMPTZ,
  notes TEXT,
  created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Table containing information about all places available
CREATE TABLE itinerary_places (
  place_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  place_name VARCHAR(128) NOT NULL,
  description TEXT,
  coordinates GEOGRAPHY(Point, 4326) NOT NULL, -- Using PostGIS for geographic data
  address VARCHAR(256) NOT NULL
);

-- Table containing expense item information like cost and description
CREATE TABLE expense_items (
  expense_item_id INT GENERATED BY DEFAULT IDENTITY PRIMARY KEY,
  expenses_id INT NOT NULL REFERENCES expenses(expenses_id),
  expense_name VARCHAR(128) NOT NULL,
  cost DECIMAL(10, 2) NOT NULL
);
